DIFICULTAD: Muy fácil
     1. Devuelve todas las películas
		SELECT * FROM PUBLIC.MOVIES m;
	 ---
	 
     2. Devuelve todos los géneros existentes
		SELECT * FROM PUBLIC.GENRES g;
	 ---
	 
     3. Devuelve la lista de todos los estudios de grabación que estén activos
		SELECT * FROM PUBLIC.STUDIOS s WHERE STUDIO_ACTIVE = 1;
	 ---
	 
     4. Devuelve una lista de los 20 últimos miembros en anotarse al videoclub
		SELECT * FROM PUBLIC.MEMBERS m ORDER BY MEMBER_DISCHARGE_DATE DESC LIMIT 20;
	 ---


DIFICULTAD: Fácil

     5. Devuelve las 20 duraciones de películas más frecuentes, ordenados de mayor a menor.
		SELECT MOVIE_DURATION, COUNT(MOVIE_ID) AS "COUNT" FROM PUBLIC.MOVIES GROUP BY MOVIE_DURATION ORDER BY "COUNT" DESC LIMIT 20;
	 ---
	 
     6. Devuelve las películas del año 2000 en adelante que empiecen por la letra A.
		SELECT * FROM MOVIES m WHERE (year(MOVIE_LAUNCH_DATE) >= 2000 AND UPPER(MOVIE_NAME) LIKE 'A%');
	 ---
	 
     7. Devuelve los actores nacidos un mes de Junio
		SELECT * FROM ACTORS WHERE month(ACTOR_BIRTH_DATE) = 6;
	 ---
	 
     8. Devuelve los actores nacidos cualquier mes que no sea Junio y que sigan vivos.
		SELECT * FROM ACTORS WHERE month(ACTOR_BIRTH_DATE) != 6 AND ACTOR_DEAD_DATE IS NULL;
	 ---
	 
     9. Devuelve el nombre y la edad de todos los directores menores o iguales de 50 años que estén vivos
		SELECT DIRECTOR_NAME, DATEDIFF(year, DIRECTOR_BIRTH_DATE, NOW()) AS "DIRECTORS AGE"
		FROM DIRECTORS d 
		WHERE (DATEDIFF(year, DIRECTOR_BIRTH_DATE, NOW()) < 50 AND DIRECTOR_DEAD_DATE IS NULL)
		ORDER BY "DIRECTORS AGE";
	 ---
		
    10. Devuelve el nombre y la edad de todos los actores menores de 50 años que hayan fallecido
		SELECT ACTOR_NAME, DATEDIFF(year, ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE ) AS "ACTORS AGE" 
		FROM ACTORS 
		WHERE (DATEDIFF(year, ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE ) < 50 AND ACTOR_DEAD_DATE IS NOT NULL)
		ORDER BY "ACTORS AGE";
	 ---
	 
    11. Devuelve el nombre de todos los directores menores o iguales de 40 años que estén vivos
		SELECT DIRECTOR_NAME 
		FROM DIRECTORS d 
		WHERE (DATEDIFF(year, DIRECTOR_BIRTH_DATE, NOW()) <= 40 AND DIRECTOR_DEAD_DATE IS NULL);
	 ---
	 
    12. Indica la edad media de los directores vivos
		SELECT AVG(DATEDIFF(year, DIRECTOR_BIRTH_DATE, DIRECTOR_DEAD_DATE)) AS "DIRECTORS AVG AGE"
		FROM DIRECTORS d 
		WHERE DIRECTOR_DEAD_DATE IS NOT NULL;
	 ---
    13. Indica la edad media de los actores que han fallecido
		SELECT AVG(DATEDIFF(year, ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE)) AS "ACTORS AVG AGE" 
		FROM ACTORS 
		WHERE ACTOR_DEAD_DATE IS NOT NULL;
	 ---


DIFICULTAD: Media

    14. Devuelve el nombre de todas las películas y el nombre del estudio que las ha realizado
		SELECT m.MOVIE_NAME, s.STUDIO_NAME FROM MOVIES m LEFT JOIN STUDIOS s ON m.STUDIO_ID = s.STUDIO_ID;
	 ---
	 
    15. Devuelve los miembros que alquilaron al menos una película entre el año 2010 y el 2015
		SELECT m.MEMBER_NAME, COUNT(MEMBER_RENTAL_DATE) AS "RENTED MOVIES" 
		FROM MEMBERS_MOVIE_RENTAL r 
		WHERE YEAR(MEMBER_RENTAL_DATE) BETWEEN 2010 AND 2015
		LEFT JOIN MEMBERS m ON r.MEMBER_ID = m.MEMBER_ID 
		GROUP BY m.MEMBER_NAME;
	 ---
	
    16. Devuelve cuantas películas hay de cada país
		SELECT n.NATIONALITY_NAME AS "NATIONALITY", COUNT(m.MOVIE_ID) AS "QTY of MOVIES" 
		FROM MOVIES m 
		LEFT JOIN NATIONALITIES n ON m.NATIONALITY_ID = n.NATIONALITY_ID 
		GROUP BY n.NATIONALITY_NAME;
	 ---
	 
    17. Devuelve todas las películas que hay de género documental
		SELECT MOVIE_NAME, g.GENRE_NAME 
		FROM MOVIES m 
		LEFT JOIN GENRES g ON m.GENRE_ID = g.GENRE_ID 
		WHERE UPPER(g.GENRE_NAME) LIKE 'DOCUMENTARY'
		ORDER BY g.GENRE_NAME;

		SELECT MOVIE_NAME
		FROM MOVIES
		WHERE GENRE_ID = (SELECT GENRE_ID FROM GENRES WHERE GENRE_NAME LIKE 'Documentary');
	 ---
	 
    18. Devuelve todas las películas creadas por directores nacidos a partir de 1980 y que todavía están vivos
		SELECT MOVIE_NAME
		FROM MOVIES m JOIN DIRECTORS D ON m.DIRECTOR_ID = d.DIRECTOR_ID
		WHERE (d.DIRECTOR_DEAD_DATE IS NULL AND YEAR(d.DIRECTOR_BIRTH_DATE) >= 1980);
	 ---	
		
    19. Indica si hay alguna coincidencia de nacimiento de ciudad (y si las hay, indicarlas) entre los miembros del videoclub y los directores.
		SELECT m.MEMBER_NAME, d.DIRECTOR_NAME, d.DIRECTOR_BIRTH_PLACE
		FROM MEMBERS m INNER JOIN DIRECTORS d ON m.MEMBER_TOWN = d.DIRECTOR_BIRTH_PLACE
	 ---
    20. Devuelve el nombre y el año de todas las películas que han sido producidas por un estudio que actualmente no esté activo
		SELECT MOVIE_NAME, YEAR(MOVIE_LAUNCH_DATE) 
		FROM MOVIES m JOIN STUDIOS s ON m.STUDIO_ID = s.STUDIO_ID 
		WHERE s.STUDIO_ACTIVE = FALSE;
	 ---
	 
    21. Devuelve una lista de las últimas 10 películas que se han alquilado
		SELECT m.MOVIE_NAME 
		FROM MEMBERS_MOVIE_RENTAL r JOIN MOVIES m ON r.MOVIE_ID = m.MOVIE_ID 
		ORDER BY MEMBER_RENTAL_DATE LIMIT 10;
	 ---
	 
    22. Indica cuántas películas ha realizado cada director antes de cumplir 41 años
		SELECT d.DIRECTOR_NAME, COUNT(DATEDIFF(YEAR, d.DIRECTOR_BIRTH_DATE, m.MOVIE_LAUNCH_DATE)) AS "# MOVIES BEFORE 41"
		FROM MOVIES m 
		JOIN DIRECTORS d ON	m.DIRECTOR_ID = d.DIRECTOR_ID
		WHERE (DATEDIFF(YEAR, d.DIRECTOR_BIRTH_DATE, m.MOVIE_LAUNCH_DATE)) < 41
		GROUP BY d.DIRECTOR_NAME;
	 ---
	 
    23. Indica cuál es la media de duración de las películas de cada director
		SELECT d.DIRECTOR_NAME, AVG(m.MOVIE_DURATION) AS "AVG RUNTIME" 
		FROM MOVIES m INNER JOIN DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID 
		GROUP BY d.DIRECTOR_NAME
		ORDER BY d.DIRECTOR_NAME;
	 ---
	 
    24. Indica cuál es el nombre y la duración mínima de las películas que han sido alquiladas en los últimos 2 años por los miembros del videoclub (La "fecha de ejecución" en este script es el 25-01-2019)
		SELECT m.MOVIE_NAME, m.MOVIE_DURATION
		FROM PUBLIC.MEMBERS_MOVIE_RENTAL r 
		JOIN MOVIES m ON r.MOVIE_ID = m.MOVIE_ID
		WHERE DATEDIFF(YEAR, MEMBER_RENTAL_DATE, '2019-01-25') <= 2
		ORDER BY m.MOVIE_DURATION ASC LIMIT 1;
		
	 ---
    25. Indica el número de películas que hayan hecho los directores durante las décadas de los 60, 70 y 80 que contengan la palabra "The" en cualquier parte del título
		SELECT d.DIRECTOR_NAME, COUNT(m.MOVIE_ID) AS "DIRECTED FILMS 1960 - 1989"
		FROM MOVIES m JOIN DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID 
		WHERE (
			UPPER(m.MOVIE_NAME) LIKE '%THE%' 
			AND YEAR(m.MOVIE_LAUNCH_DATE) >= 1960 
			AND YEAR(m.MOVIE_LAUNCH_DATE) < 1990
			)
		GROUP BY d.DIRECTOR_NAME;
	 ---


DIFICULTAD: Difícil

    26. Lista nombre, nacionalidad y director de todas las películas
		SELECT m.MOVIE_NAME AS "MOVIE", n.NATIONALITY_NAME AS "NATIONALITY", d.DIRECTOR_NAME AS "DIRECTOR"
		FROM MOVIES m 
		JOIN NATIONALITIES n ON m.NATIONALITY_ID = n.NATIONALITY_ID 
		JOIN DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID
		ORDER BY n.NATIONALITY_NAME;
	 ---
	 
    27. Muestra las películas con los actores que han participado en cada una de ellas
		SELECT m.MOVIE_NAME AS "MOVIE TITLE", a.ACTOR_NAME AS "ACTOR NAME" 
		FROM ACTORS a 
		JOIN MOVIES_ACTORS ma ON a.ACTOR_ID = ma.ACTOR_ID 
		JOIN MOVIES m ON m.MOVIE_ID = ma.MOVIE_ID;
	 ---
	 
    28. Indica cual es el nombre del director del que más películas se han alquilado
		SELECT d.DIRECTOR_NAME, COUNT(m.MOVIE_NAME) AS "DIRECTED_MOVIES"
		FROM MEMBERS_MOVIE_RENTAL r 
		JOIN MOVIES m ON r.MOVIE_ID = m.MOVIE_ID
		JOIN DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID
		GROUP BY d.DIRECTOR_NAME
		ORDER BY "DIRECTED_MOVIES" DESC;
	 ---
	 
    29. Indica cuantos premios han ganado cada uno de los estudios con las películas que han creado
		SELECT s.STUDIO_NAME, SUM(a.AWARD_WIN) AS "AWARDS"
		FROM AWARDS a
		JOIN MOVIES m ON a.MOVIE_ID = m.MOVIE_ID
		JOIN STUDIOS s ON m.STUDIO_ID = s.STUDIO_ID
		GROUP BY s.STUDIO_NAME;
	 ---
	 
    30. Indica el número de premios a los que estuvo nominado un actor, pero que no ha conseguido (Si una película está nominada a un premio, su actor también lo está)
		SELECT ac.ACTOR_NAME, SUM(aw.AWARD_ALMOST_WIN) AS "NOMINATIONS"
		FROM PUBLIC.MOVIES_ACTORS ma
		JOIN ACTORS ac ON ma.ACTOR_ID = ac.ACTOR_ID
		JOIN AWARDS aw ON ma.MOVIE_ID = aw.MOVIE_ID
		GROUP BY ac.ACTOR_NAME
		ORDER BY "NOMINATIONS" DESC;
	 ---
	 
    31. Indica cuantos actores y directores hicieron películas para los estudios no activos
		SELECT s.STUDIO_NAME, COUNT(DISTINCT m.DIRECTOR_ID) + COUNT(a.ACTOR_ID) AS "TOTAL_ACTORS_DIRECTORS"
		FROM MOVIES m
		JOIN STUDIOS s ON m.STUDIO_ID = s.STUDIO_ID
		JOIN MOVIES_ACTORS ma ON m.MOVIE_ID = ma.MOVIE_ID
		JOIN ACTORS a ON ma.ACTOR_ID = a.ACTOR_ID
		WHERE s.STUDIO_ACTIVE = FALSE
		GROUP BY s.STUDIO_NAME;
	 ---
	 
    32. Indica el nombre, ciudad, y teléfono de todos los miembros del videoclub que hayan alquilado películas que hayan sido nominadas a más de 150 premios y ganaran menos de 50
		SELECT DISTINCT m.MEMBER_NAME, m.MEMBER_TOWN, m.MEMBER_PHONE---,mmr.MEMBER_MOVIE_RENTAL_ID, mmr.MOVIE_ID, aw.AWARD_NOMINATION, aw.AWARD_WIN
		FROM MEMBERS m
		JOIN MEMBERS_MOVIE_RENTAL mmr ON m.MEMBER_ID = mmr.MEMBER_ID
		JOIN AWARDS aw ON mmr.MOVIE_ID = aw.MOVIE_ID
		WHERE aw.AWARD_WIN <50 AND aw.AWARD_NOMINATION > 150;
	 ---
	 
    33. Comprueba si hay errores en la BD entre las películas y directores (un director fallecido en el 76 no puede dirigir una película en el 88)
		SELECT d.DIRECTOR_NAME, d.DIRECTOR_DEAD_DATE, MAX(m.MOVIE_LAUNCH_DATE) 
		FROM MOVIES m
		JOIN DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID
		WHERE d.DIRECTOR_DEAD_DATE IS NOT NULL AND DATEDIFF(day, m.MOVIE_LAUNCH_DATE, d.DIRECTOR_DEAD_DATE) < 0 
		GROUP BY d.DIRECTOR_NAME, d.DIRECTOR_DEAD_DATE;
	 ---
    34. Utilizando la información de la sentencia anterior, modifica la fecha de defunción a un año más tarde del estreno de la película (mediante sentencia SQL)
		UPDATE DIRECTORS D
		SET d.DIRECTOR_DEAD_DATE = (SELECT MAX(m.MOVIE_LAUNCH_DATE) + INTERVAL '1' YEAR
			FROM MOVIES m
			JOIN DIRECTORS d1 ON m.DIRECTOR_ID = d1.DIRECTOR_ID
			WHERE d1.DIRECTOR_DEAD_DATE IS NOT NULL AND DATEDIFF(day, m.MOVIE_LAUNCH_DATE, d1.DIRECTOR_DEAD_DATE) < 0 AND d.DIRECTOR_ID = d1.DIRECTOR_ID 
			GROUP BY d1.DIRECTOR_NAME)
		WHERE
			d.DIRECTOR_ID
		IN (
			SELECT
				d.DIRECTOR_ID
			FROM
				MOVIES m
			JOIN DIRECTORS d ON
				m.DIRECTOR_ID = d.DIRECTOR_ID
			WHERE
				d.DIRECTOR_DEAD_DATE IS NOT NULL
				AND DATEDIFF(DAY, m.MOVIE_LAUNCH_DATE, d.DIRECTOR_DEAD_DATE) < 0 

		);
	 ---

DIFICULTAD: Berserk mode (enunciados simples, mucha diversión...)
    35. Indica cuál es el género favorito de cada uno de los directores cuando dirigen una película
		SELECT
		GROUPID.DIRECTOR_NAME,
		GROUP_CONCAT(GROUPID.GENRE_NAME) AS GENRE_NAME
		FROM(
			SELECT
				COUNT(G.GENRE_NAME) AS NUM_MOVIES,
				D.DIRECTOR_ID,
				D.DIRECTOR_NAME,
				G.GENRE_ID,
				G.GENRE_NAME
			FROM
				MOVIES M
			INNER JOIN GENRES AS G ON
				M.GENRE_ID = G.GENRE_ID
			INNER JOIN DIRECTORS D ON
				M.DIRECTOR_ID = D.DIRECTOR_ID
			GROUP BY
				G.GENRE_ID,
				D.DIRECTOR_ID
			ORDER BY
				D.DIRECTOR_ID
		) GROUPID
		INNER JOIN (
			SELECT
				DIRECTOR_ID,
				MAX(NUM_MOVIES) NUM_MOVIES
			FROM (
				SELECT
					COUNT(G.GENRE_NAME) AS NUM_MOVIES,
					D.DIRECTOR_ID,
					D.DIRECTOR_NAME,
					G.GENRE_ID,
					G.GENRE_NAME
				FROM
					MOVIES M
				INNER JOIN GENRES AS G ON
					M.GENRE_ID = G.GENRE_ID
				INNER JOIN DIRECTORS D ON
					M.DIRECTOR_ID = D.DIRECTOR_ID
				GROUP BY
					G.GENRE_ID,
					D.DIRECTOR_ID
				ORDER BY
					D.DIRECTOR_ID
			)
			GROUP BY
				DIRECTOR_ID
		) MAXVAL ON GROUPID.DIRECTOR_ID = MAXVAL.DIRECTOR_ID AND GROUPID.NUM_MOVIES = MAXVAL.NUM_MOVIES
		GROUP BY GROUPID.DIRECTOR_NAME;
	 ---
	 
    36. Indica cuál es la nacionalidad favorita de cada uno de los estudios en la producción de las películas
		SELECT 
			STUDIO_GROUP.STUDIO_NAME,
			GROUP_CONCAT(STUDIO_GROUP.NATIONALITY_NAME) AS NATIONALITY_NAME
		FROM (
				SELECT S.STUDIO_NAME, N.NATIONALITY_NAME, COUNT(M.MOVIE_NAME) AS NUM_MOVIES
				FROM MOVIES M
				JOIN NATIONALITIES N ON m.NATIONALITY_ID = N.NATIONALITY_ID
				JOIN STUDIOS S ON M.STUDIO_ID = S.STUDIO_ID
				GROUP BY STUDIO_NAME, NATIONALITY_NAME
				ORDER BY STUDIO_NAME, NATIONALITY_NAME
		) STUDIO_GROUP
		INNER JOIN (
			SELECT 
				STUDIO_NAME,
				MAX(NUM_MOVIES) NUM_MOVIES
			FROM (
				SELECT S.STUDIO_NAME, N.NATIONALITY_NAME, COUNT(M.MOVIE_NAME) AS NUM_MOVIES
					FROM MOVIES M
					JOIN NATIONALITIES N ON m.NATIONALITY_ID = N.NATIONALITY_ID
					JOIN STUDIOS S ON M.STUDIO_ID = S.STUDIO_ID
					GROUP BY STUDIO_NAME, NATIONALITY_NAME
					ORDER BY STUDIO_NAME, NATIONALITY_NAME
			)
			GROUP BY STUDIO_NAME
		) MAXVAL ON STUDIO_GROUP.STUDIO_NAME = MAXVAL.STUDIO_NAME AND STUDIO_GROUP.NUM_MOVIES = MAXVAL.NUM_MOVIES
		GROUP BY STUDIO_GROUP.STUDIO_NAME
	 ---
    37. Indica cuál fue la primera película que alquilaron los miembros del videoclub cuyos teléfonos tengan como último dígito el ID de alguna nacionalidad
	
		---Primer alquiler
		SELECT 
			MEMBER_ID, MEMBER_PHONE, MIN(MEMBER_RENTAL_DATE) AS FIRST_RENT
		FROM (
			SELECT MMR.MEMBER_ID, MB.MEMBER_PHONE, M.MOVIE_ID, M.MOVIE_NAME, MMR.MEMBER_RENTAL_DATE
			FROM MEMBERS_MOVIE_RENTAL MMR
			INNER JOIN MOVIES M ON MMR.MOVIE_ID = M.MOVIE_ID
			INNER JOIN MEMBERS MB ON MMR.MEMBER_ID = MB.MEMBER_ID
			ORDER BY MEMBER_ID, MMR.MEMBER_RENTAL_DATE
		)
		GROUP BY MEMBER_ID, MEMBER_PHONE;

		--Último dígito coincidiente con id de nacionalidad
		SELECT RIGHT(M.MEMBER_PHONE, 1) AS LASTDIGIT
		FROM MEMBERS M
		WHERE (CAST(RIGHT(M.MEMBER_PHONE, 1) AS INT) IN (SELECT N.NATIONALITY_ID FROM NATIONALITIES N));

		---Último dígito de los miembros, desde la consulta anterior
		SELECT  MEMBER_ID, RIGHT(MEMBER_PHONE, 1) AS LAST_DIGIT, FIRST_RENT
		FROM (
			SELECT 
			MEMBER_ID, MEMBER_PHONE, MIN(MEMBER_RENTAL_DATE) AS FIRST_RENT
		FROM (
			SELECT MMR.MEMBER_ID, MB.MEMBER_PHONE, M.MOVIE_ID, M.MOVIE_NAME, MMR.MEMBER_RENTAL_DATE
			FROM MEMBERS_MOVIE_RENTAL MMR
			INNER JOIN MOVIES M ON MMR.MOVIE_ID = M.MOVIE_ID
			INNER JOIN MEMBERS MB ON MMR.MEMBER_ID = MB.MEMBER_ID
			ORDER BY MEMBER_ID, MMR.MEMBER_RENTAL_DATE
		) GROUP_MEMBERS
		WHERE (CAST(RIGHT(GROUP_MEMBERS.MEMBER_PHONE, 1) AS INT) IN (SELECT N.NATIONALITY_ID FROM NATIONALITIES N))
		GROUP BY MEMBER_ID, MEMBER_PHONE
		);
	 ---
	 
	 ---Lo de Noa
		SELECT
			MOVIERENTALS.MOVIE_NAME,
			MOVIERENTALS.MEMBER_NAME
		FROM
			(
			SELECT
				MO.MOVIE_NAME,
				MMR.MOVIE_ID,
				MMR.MEMBER_ID,
				MMR.MEMBER_RENTAL_DATE,
				M.MEMBER_NAME,
				TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
			FROM
				MOVIES MO
			INNER JOIN
			MEMBERS_MOVIE_RENTAL MMR
			ON
				MO.MOVIE_ID = MMR.MOVIE_ID
			INNER JOIN MEMBERS M ON
				MMR.MEMBER_ID = M.MEMBER_ID
			WHERE
				TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
				SELECT
					NATIONALITY_ID
				FROM
					NATIONALITIES

		 

		)
			GROUP BY
				MO.MOVIE_NAME,
				MMR.MOVIE_ID,
				MMR.MEMBER_ID,
				MMR.MEMBER_RENTAL_DATE,
				M.MEMBER_NAME,
				LAST_DIGIT
			ORDER BY
				M.MEMBER_NAME

		 

		) MOVIERENTALS
		INNER JOIN

			(
			SELECT
				MEMBER_ID,
				MIN(MEMBER_RENTAL_DATE) AS "FIRST_RENTAL"
			FROM
				(
				SELECT
					MO.MOVIE_NAME,
					MMR.MOVIE_ID,
					MMR.MEMBER_ID,
					MMR.MEMBER_RENTAL_DATE,
					M.MEMBER_NAME,
					TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
				FROM
					MOVIES MO
				INNER JOIN
			MEMBERS_MOVIE_RENTAL MMR
			ON
					MO.MOVIE_ID = MMR.MOVIE_ID
				INNER JOIN MEMBERS M ON
					MMR.MEMBER_ID = M.MEMBER_ID
				WHERE
					TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
					SELECT
						NATIONALITY_ID
					FROM
						NATIONALITIES

		 

		)
				GROUP BY
					MO.MOVIE_NAME,
					MMR.MOVIE_ID,
					MMR.MEMBER_ID,
					MMR.MEMBER_RENTAL_DATE,
					M.MEMBER_NAME,
					LAST_DIGIT
				ORDER BY
					M.MEMBER_NAME
			)
			GROUP BY
				MEMBER_ID) FIRSTRENTALS ON
			MOVIERENTALS.MEMBER_ID = FIRSTRENTALS.MEMBER_ID AND MOVIERENTALS.MEMBER_RENTAL_DATE = FIRSTRENTALS.FIRST_RENTAL
		GROUP BY
			MOVIERENTALS.MOVIE_NAME,
			MOVIERENTALS.MEMBER_NAME
			
	 ---Fin ejercicios